import React, { useState, useEffect } from 'react';
import './styles/App.css';
import './styles/components.css';

import PageLayout from './layouts/PageLayout';
import Header from './components/Header';
import VapesContent from './components/VapesContent';
import Footer from './components/Footer';

import { WalletProvider } from './context/WalletContext';
import { NotificationProvider } from './context/NotificationContext';

import { Vape } from './types';

import { WalletProvider, useWallet } from './context/WalletContext';
import { NotificationProvider, useNotification } from './context/NotificationContext';

// Type definitions
type TabType = 'dashboard' | 'vapes' | 'staking' | 'governance';

// Mock CBD vapes data
const cbdVapes: Vape[] = [
  {
    id: "1",
    name: 'OG Kush CBD',
    type: 'Indica-dominant',
    flavor: 'Pine & Earth',
    effects: 'Relaxing & Calming',
    priceAlgo: 135,
    priceUsdc: 33.00,
    hempEarned: 135000,
    potency: '66.6% CBD',
    terpenes: ['Myrcene', 'Limonene', 'Caryophyllene'],
    color: 'from-green-500 to-emerald-600',
    image: 'https://huggingface.co/spaces/CBDGold/cbdgold/resolve/main/images/vape%20cart%20white%20top.jpeg'
  },
  {
    id: "2",
    name: 'Blue Dream CBD',
    type: 'Sativa-dominant',
    flavor: 'Blueberry & Vanilla',
    effects: 'Creative & Uplifting',
    priceAlgo: 135,
    priceUsdc: 33.00,
    hempEarned: 135000,
    potency: '66.6% CBD',
    terpenes: ['Myrcene', 'Pinene', 'Caryophyllene'],
    color: 'from-blue-500 to-indigo-600',
    image: 'https://huggingface.co/spaces/CBDGold/cbdgold/resolve/main/images/vape%20cart%20white%20top.jpeg'
  }
];

interface StakingPool {
  id: number;
  name: string;
  minStake: number;
  discount: number;
  apy: number;
  shipping: string;
  benefits: string[];
  color: string;
}

interface GovernanceProposal {
  id: number;
  title: string;
  description: string;
  status: string;
  timeLeft: string;
  weedRequired: number;
}

// Hero section content for Hugging Face Space mirror
// CBD Gold vape products
const cbdVapes: Vape[] = [
  {
    id: 1,
    name: 'OG Kush CBD',
    strain: 'OG Kush',
    type: 'Indica-dominant',
    flavor: 'Pine & Earth',
    effects: 'Relaxing & Calming',
    priceAlgo: 135,
    priceUsdc: 33.00,
    hempEarned: 135000,
    potency: '66.6% CBD',
    terpenes: ['Myrcene', 'Limonene', 'Caryophyllene'],
    color: 'from-green-500 to-emerald-600',
    image: 'https://huggingface.co/spaces/CBDGold/cbdgold/resolve/main/images/vape%20cart%20white%20top.jpeg'
  },
  {
    id: 2,
    name: 'Blue Dream CBD',
    strain: 'Blue Dream',
    type: 'Sativa-dominant',
    flavor: 'Blueberry & Vanilla',
    effects: 'Creative & Uplifting',
    priceAlgo: 135,
    priceUsdc: 33.00,
    hempEarned: 135000,
    potency: '66.6% CBD',
    terpenes: ['Myrcene', 'Pinene', 'Caryophyllene'],
    color: 'from-blue-500 to-indigo-600',
    image: 'https://huggingface.co/spaces/CBDGold/cbdgold/resolve/main/images/vape%20cart%20white%20top.jpeg'
  }
];

// Governance proposals
const governanceProposals: GovernanceProposal[] = [
  {
    id: 1,
    title: 'New Strain: Zkittlez CBD',
    description: 'Vote to add Zkittlez-inspired terpene profile with 66.6% CBD potency',
    status: 'Active',
    timeLeft: '5 days',
    weedRequired: 1
  },
  {
    id: 2,
    title: 'Limited Edition: 24K Gold Hardware',
    description: 'Propose gold-plated ceramic tips for premium tier members',
    status: 'Active',
    timeLeft: '12 days',
    weedRequired: 2.5
  },
  {
    id: 3,
    title: 'Expand to New Markets',
    description: 'Proposal to expand CBD Gold distribution to 5 new states',
    status: 'Active',
    timeLeft: '8 days',
    weedRequired: 3
  },
  {
    id: 4,
    title: 'Community Airdrop Event',
    description: 'Quarterly airdrop of 5M HEMP tokens to active stakers',
    status: 'Active',
    timeLeft: '15 days',
    weedRequired: 1.5
  }
];

// Staking pools configuration
const stakingPools: StakingPool[] = [
  {
    id: 1,
    name: 'Silver',
    minStake: 1000000,
    discount: 10,
    apy: 15,
    shipping: 'Express',
    benefits: ['10% Off All Products', '15% APY', 'Express Shipping'],
    color: 'from-gray-400 to-gray-500'
  },
  {
    id: 2,
    name: 'Gold',
    minStake: 5000000,
    discount: 25,
    apy: 25,
    shipping: 'Priority',
    benefits: ['25% Off All Products', '25% APY', 'Priority Shipping', 'Early Access'],
    color: 'from-yellow-400 to-yellow-500'
  },
  {
    id: 3,
    name: 'Platinum',
    minStake: 10000000,
    discount: 40,
    apy: 35,
    shipping: 'Next Day',
    benefits: ['40% Off All Products', '35% APY', 'Next Day Shipping', 'VIP Support', 'Exclusive NFTs'],
    color: 'from-purple-400 to-purple-500'
  }
];

// Hero section component
const hero = (
  <section className="relative flex flex-col items-center justify-center min-h-[80vh] w-full text-center bg-gradient-to-br from-[#181824] via-[#23243a] to-[#1a1a2e] pb-16 overflow-hidden">
    {/* Animated gradient overlay */}
    <div className="absolute inset-0 bg-gradient-to-br from-green-400/20 via-blue-500/20 to-purple-600/20 animate-pulse-slow blur-2xl opacity-70 pointer-events-none" />
    {/* Subtle noise overlay for texture */}
    <div className="absolute inset-0 bg-[url('https://grainy-gradients.vercel.app/noise.svg')] opacity-20 mix-blend-soft-light pointer-events-none" />
    <div className="relative z-10 flex flex-col items-center justify-center">
      <img
        src="https://huggingface.co/spaces/CBDGold/cbdgold/resolve/main/images/CBD%20Logo%20-%20PNG%20File%20-%20Black%20Background%20-%2072dpi%20-%20Web%20Use.png"
        alt="CBD Gold Logo"
        className="w-36 h-36 rounded-full shadow-2xl mb-8 border-4 border-white/10 bg-black/60 object-cover"
        style={{ boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.37)' }}
      />
      <h1 className="text-5xl md:text-6xl font-black text-white drop-shadow-2xl mb-5 tracking-tight leading-tight">
        CBD Gold ShopFi
      </h1>
      <p className="text-xl md:text-2xl text-gray-200 max-w-2xl mx-auto mb-10 font-medium drop-shadow">
        Premium CBD 510 ceramic vapes, ShopFi staking, and WEED governance.<br className="hidden md:block" />
        <span className="text-green-300 font-semibold">Powered by Algorand.</span>
      </p>
      <button
        className="px-10 py-4 rounded-full bg-gradient-to-r from-green-400 to-green-600 text-black font-extrabold text-xl shadow-xl hover:from-green-500 hover:to-green-700 transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-green-400/50 border-2 border-white/10 backdrop-blur-lg"
        onClick={() => window.scrollTo({ top: 600, behavior: 'smooth' })}
      >
        Explore ShopFi
      </button>
    </div>
  </section>
);

const App: React.FC = () => {
  // State definitions
  const [activeTab, setActiveTab] = useState<'dashboard' | 'vapes' | 'staking' | 'governance'>('dashboard');
  const [walletConnected, setWalletConnected] = useState(false);
  const [walletAddress, setWalletAddress] = useState("");
  const [walletModalOpen, setWalletModalOpen] = useState(false);
  
  // Token balances
  const [hempBalance, setHempBalance] = useState(0);
  const [weedBalance, setWeedBalance] = useState(0);
  const [algoBalance, setAlgoBalance] = useState(0);
  const [usdcBalance, setUsdcBalance] = useState(0);
  
  // UI state
  const [notification, setNotification] = useState<null | { type: 'success' | 'error'; message: string }>(null);
  const [loadingAction, setLoadingAction] = useState<string | null>(null);
  const [stakingInputs, setStakingInputs] = useState<{ [key: number]: string }>({});
  const [activeTab, setActiveTab] = useState<'dashboard' | 'vapes' | 'staking' | 'governance'>('dashboard');
  const [walletConnected, setWalletConnected] = useState(false);
  const [walletAddress, setWalletAddress] = useState("");
  const [walletModalOpen, setWalletModalOpen] = useState(false);
  
  // Token balances
  const [hempBalance, setHempBalance] = useState(0);
  const [weedBalance, setWeedBalance] = useState(0);
  const [algoBalance, setAlgoBalance] = useState(0);
  const [usdcBalance, setUsdcBalance] = useState(0);
  
  // UI state
  const [notification, setNotification] = useState<null | { type: 'success' | 'error'; message: string }>(null);
  const [loadingAction, setLoadingAction] = useState<string | null>(null);
  const [stakingInputs, setStakingInputs] = useState<{ [key: number]: string }>({});

  const showNotification = (type: 'success' | 'error', message: string) => {
    setNotification({ type, message });
    setTimeout(() => setNotification(null), 3000);
  }

  const handleBuyWithAlgo = (vape: Vape) => {
    if (!walletConnected) return showNotification('error', 'Connect your wallet first.');
    if (algoBalance < vape.priceAlgo) return showNotification('error', 'Insufficient ALGO balance.');
    setLoadingAction('buy-algo-' + vape.id);
    setTimeout(() => {
      setAlgoBalance((b: number) => b - vape.priceAlgo);
      setHempBalance((b: number) => b + vape.hempEarned);
      setLoadingAction(null);
      showNotification('success', `Purchased ${vape.name} with ALGO!`);
    }, 1200);
  }

  const handleBuyWithUsdc = (vape: Vape) => {
    if (!walletConnected) return showNotification('error', 'Connect your wallet first.');
    if (usdcBalance < vape.priceUsdc) return showNotification('error', 'Insufficient USDC balance.');
    setLoadingAction('buy-usdc-' + vape.id);
    setTimeout(() => {
      setUsdcBalance((b: number) => b - vape.priceUsdc);
      setHempBalance((b: number) => b + vape.hempEarned);
      setLoadingAction(null);
      showNotification('success', `Purchased ${vape.name} with USDC!`);
    }, 1200);
  }

  const handleSpinForGold = (vape: Vape) => {
    if (!walletConnected) return showNotification('error', 'Connect your wallet first.');
    setLoadingAction('spin-' + vape.id);
    setTimeout(() => {
      // Randomly win HEMP or discount (mock)
      const win = Math.random() < 0.5 ? `${Math.floor(Math.random()*200000+50000)} HEMP` : `${Math.floor(Math.random()*25+5)}% discount`;
      setLoadingAction(null);
      showNotification('success', `Spin result: ${win}`);
    }, 1500);
  }

  const handleStake = (pool: StakingPool) => {
    if (!walletConnected) return showNotification('error', 'Connect your wallet first.');
    const amount = parseInt(stakingInputs[pool.id] || '');
    if (!amount || amount < pool.minStake) return showNotification('error', `Enter at least ${(pool.minStake/1000000).toFixed(1)}M HEMP.`);
    if (hempBalance < amount) return showNotification('error', 'Insufficient HEMP balance.');
    setLoadingAction('stake-' + pool.id);
    setTimeout(() => {
      setHempBalance((b: number) => b - amount);
      showNotification('success', `Staked ${amount.toLocaleString()} HEMP in ${pool.name}!`);
      setLoadingAction(null);
      setStakingInputs((inputs) => ({ ...inputs, [pool.id]: '' }));
    }, 1200);
  }

  const handleVote = (proposal: GovernanceProposal) => {
    if (!walletConnected) return showNotification('error', 'Connect your wallet first.');
    if (weedBalance < proposal.weedRequired) return showNotification('error', 'Insufficient WEED balance.');
    setLoadingAction('vote-' + proposal.id);
    setTimeout(() => {
      setWeedBalance((b: number) => b - proposal.weedRequired);
      showNotification('success', `Voted on: ${proposal.title}`);
      setLoadingAction(null);
    }, 1000);
  }

  useEffect(() => {
    if ((window as any).AOS) (window as any).AOS.init({ duration: 800, easing: "ease-in-out", once: true });
    if ((window as any).feather) (window as any).feather.replace();
  }, [walletModalOpen]);

  const handleDisconnectWallet = () => {
    setWalletConnected(false);
    setWalletAddress("");
    setWalletModalOpen(false);
    setHempBalance(0);
    setWeedBalance(0);
    setAlgoBalance(0);
    setUsdcBalance(0);
  };

  const handleConnectWallet = () => {
    setWalletAddress("HEMP7X4A3QZXKJYB2NWVF8H5M9GTCR6PLQS1EUDKA8YW3V2TZRI4BJLM6A");
    setWalletConnected(true);
    setWalletModalOpen(true);
    // Set mock balances for demo
    setHempBalance(1000000);
    setWeedBalance(500);
    setAlgoBalance(1000);
    setUsdcBalance(1000);
  };
  
  return (
    <div className="font-sans min-h-screen bg-gradient-to-br from-[#1a1a2e] to-[#16213e] text-white">
      {/* Header */}
      <header className="flex justify-between items-center p-4">
        <div className="flex items-center">
          <img src="https://huggingface.co/spaces/CBDGold/cbdgold/resolve/main/images/CBD%20Logo%20-%20PNG%20File%20-%20Black%20Background%20-%2072dpi%20-%20Web%20Use.png" alt="CBD Gold Logo" className="h-10 w-10 mr-3 rounded-full" />
          <h1 className="text-2xl font-bold">CBD Gold ShopFi</h1>
        </div>
        <button
          className="bg-gradient-to-r from-green-400 to-green-600 px-6 py-2 rounded-full font-semibold hover:from-green-500 hover:to-green-700 transition-all"
          onClick={walletConnected ? handleDisconnectWallet : handleConnectWallet}
        >
          {walletConnected ? 'Wallet Connected' : 'Connect Wallet'}
        </button>
      </header>

      {/* Hero Section */}
      {hero}

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        {/* Navigation Tabs */}
        <nav className="flex flex-wrap gap-2 mb-8">
          {[
            { id: 'dashboard', icon: 'home', label: 'Dashboard' },
            { id: 'vapes', icon: 'shopping-bag', label: 'CBD Gold' },
            { id: 'staking', icon: 'lock', label: 'ShopFi' },
            { id: 'governance', icon: 'users', label: 'Governance' }
          ].map(tab => (
            <button
              key={tab.id}
              className={`tab-btn flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold 
                ${activeTab === tab.id 
                  ? "bg-gradient-to-r from-green-400 to-green-600 text-black shadow-lg transform scale-105" 
                  : "bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"
                }`}
              onClick={() => setActiveTab(tab.id)}
            >
              <i data-feather={tab.icon}></i>
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>

        {/* Content Sections */}
      <footer className="bg-gray-900 text-white py-8 mt-12">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
              <h3 className="text-lg font-bold mb-4">ShopFi</h3>
              <p className="text-gray-400 text-sm">Hemp Innovation powered by CBD Gold & Algorand</p>
            </div>
            <div>
              <h4 className="font-bold mb-4">Products</h4>
              <ul className="space-y-2 text-gray-400">
                <li><a href="#" className="hover:text-green-400 transition">CBD Gold Vapes</a></li>
                <li><a href="#" className="hover:text-green-400 transition">ShopFi Staking</a></li>
                <li><a href="#" className="hover:text-green-400 transition">Governance</a></li>
              </ul>
            </div>
            <div>
              <h4 className="font-bold mb-4">Resources</h4>
              <ul className="space-y-2 text-gray-400">
                <li><a href="#" className="hover:text-green-400 transition">Whitepaper</a></li>
                <li><a href="#" className="hover:text-green-400 transition">Tokenomics</a></li>
                <li><a href="#" className="hover:text-green-400 transition">FAQ</a></li>
              </ul>
            </div>
            <div>
              <h4 className="font-bold mb-4">Connect</h4>
              <div className="flex space-x-4">
                <a href="#" className="text-gray-400 hover:text-green-400 transition"><i data-feather="twitter"></i></a>
                <a href="#" className="text-gray-400 hover:text-green-400 transition"><i data-feather="instagram"></i></a>
                <a href="#" className="text-gray-400 hover:text-green-400 transition"><i data-feather="discord"></i></a>
                <a href="#" className="text-gray-400 hover:text-green-400 transition"><i data-feather="github"></i></a>
              </div>
              <div className="mt-4 text-sm text-gray-400">
                <p>support@cbdgold.com</p>
              </div>
            </div>
          </div>
          <div className="border-t border-gray-800 mt-8 pt-8 text-sm text-gray-500">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <p>© 2025 CBD Gold ShopFi. All rights reserved.</p>
              <div className="flex space-x-4 mt-4 md:mt-0">
                <a href="#" className="hover:text-green-400 transition">Terms</a>
                <a href="#" className="hover:text-green-400 transition">Privacy</a>
                <a href="#" className="hover:text-green-400 transition">Compliance</a>
              </div>
            </div>
          </div>
        </div>
      </footer>
    </>
  );

  return (
    <>
      <div className="font-sans min-h-screen bg-gradient-to-br from-[#1a1a2e] to-[#16213e] text-white">
      {/* Header */}
      <header className="flex justify-between items-center mb-8">
        <div className="flex items-center">
          <img src="https://huggingface.co/spaces/CBDGold/cbdgold/resolve/main/images/CBD%20Logo%20-%20PNG%20File%20-%20Black%20Background%20-%2072dpi%20-%20Web%20Use.png" alt="CBD Gold Logo" className="h-10 w-10 mr-3 rounded-full" />
          <h1 className="text-2xl font-bold">CBD Gold ShopFi</h1>
        </div>
        <button
          className="bg-gradient-to-r from-green-400 to-green-600 px-6 py-2 rounded-full font-semibold hover:from-green-500 hover:to-green-700 transition-all"
          onClick={walletConnected ? handleDisconnectWallet : handleConnectWallet}
        >
          {walletConnected ? 'Wallet Connected' : 'Connect Wallet'}
        </button>
      </header>
      {hero}
      <div className="container mx-auto px-2 sm:px-4 py-8">
        {/* Navigation Tabs */}
        <div className="flex flex-wrap gap-2 mb-8">
          <button
            className={`tab-btn flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold ${activeTab === "dashboard" ? "bg-gradient-to-r from-green-400 to-green-600 text-black shadow-lg transform scale-105" : "bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"}`}
            onClick={() => setActiveTab("dashboard")}
          >
            <i data-feather="home"></i>
            <span>Dashboard</span>
          </button>
          <button
            className={`tab-btn flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold ${activeTab === "vapes" ? "bg-gradient-to-r from-green-400 to-green-600 text-black shadow-lg transform scale-105" : "bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"}`}
            onClick={() => setActiveTab("vapes")}
          >
            <i data-feather="shopping-bag"></i>
            <span>CBD Gold</span>
          </button>
          <button
            className={`tab-btn flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold ${activeTab === "staking" ? "bg-gradient-to-r from-green-400 to-green-600 text-black shadow-lg transform scale-105" : "bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"}`}
            onClick={() => setActiveTab("staking")}
          >
            <i data-feather="lock"></i>
            <span>ShopFi</span>
          </button>
          <button
            className={`tab-btn flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold ${activeTab === "governance" ? "bg-gradient-to-r from-green-400 to-green-600 text-black shadow-lg transform scale-105" : "bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"}`}
            onClick={() => setActiveTab("governance")}
          >
            <i data-feather="users"></i>
            <span>Governance</span>
          </button>
        </div>
        {/* Wallet Modal */}


  return (
    <>
      <div className="font-sans min-h-screen bg-gradient-to-br from-[#1a1a2e] to-[#16213e] text-white">
        {/* Header */}
        <header className="flex justify-between items-center mb-8">
          <div className="flex items-center">
            <img src="https://huggingface.co/spaces/CBDGold/cbdgold/resolve/main/images/CBD%20Logo%20-%20PNG%20File%20-%20Black%20Background%20-%2072dpi%20-%20Web%20Use.png" alt="CBD Gold Logo" className="h-10 w-10 mr-3 rounded-full" />
            <h1 className="text-2xl font-bold">CBD Gold ShopFi</h1>
          </div>
          <button
            className="bg-gradient-to-r from-green-400 to-green-600 px-6 py-2 rounded-full font-semibold hover:from-green-500 hover:to-green-700 transition-all"
            onClick={walletConnected ? handleDisconnectWallet : handleConnectWallet}
          >
            {walletConnected ? 'Wallet Connected' : 'Connect Wallet'}
          </button>
        </header>
        {hero}
        <div className="container mx-auto px-2 sm:px-4 py-8">
          {/* Navigation Tabs */}
          <div className="flex flex-wrap gap-2 mb-8">
            <button
              className={`tab-btn flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold ${activeTab === "dashboard" ? "bg-gradient-to-r from-green-400 to-green-600 text-black shadow-lg transform scale-105" : "bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"}`}
              onClick={() => setActiveTab("dashboard")}
            >
              <i data-feather="home"></i>
              <span>Dashboard</span>
            </button>
            <button
              className={`tab-btn flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold ${activeTab === "vapes" ? "bg-gradient-to-r from-green-400 to-green-600 text-black shadow-lg transform scale-105" : "bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"}`}
              onClick={() => setActiveTab("vapes")}
            >
              <i data-feather="shopping-bag"></i>
              <span>CBD Gold</span>
            </button>
            <button
              className={`tab-btn flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold ${activeTab === "staking" ? "bg-gradient-to-r from-green-400 to-green-600 text-black shadow-lg transform scale-105" : "bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"}`}
              onClick={() => setActiveTab("staking")}
            >
              <i data-feather="lock"></i>
              <span>ShopFi</span>
            </button>
            <button
              className={`tab-btn flex items-center space-x-2 px-6 py-3 rounded-lg font-semibold ${activeTab === "governance" ? "bg-gradient-to-r from-green-400 to-green-600 text-black shadow-lg transform scale-105" : "bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"}`}
              onClick={() => setActiveTab("governance")}
            >
              <i data-feather="users"></i>
              <span>Governance</span>
            </button>
          </div>

          {/* Wallet Modal */}
          {walletModalOpen && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className="glass-card rounded-2xl p-6 max-w-md w-full" data-aos="zoom-in">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-xl font-bold">Wallet Connected</h3>
                <button className="text-gray-400 hover:text-white" onClick={() => setWalletModalOpen(false)}>
                  <i data-feather="x"></i>
                </button>
              </div>
              <div className="bg-black bg-opacity-30 rounded-lg p-4 mb-4">
                <p className="text-sm text-gray-300 mb-1">Algorand Address:</p>
                <p className="font-mono text-xs text-green-400 break-all">{walletAddress}</p>
              </div>
              <div className="grid grid-cols-2 gap-4 text-sm mb-4">
                <div>
                  <p className="text-gray-300">HEMP:</p>
                  <p className="text-green-400 font-bold">{hempBalance.toLocaleString()}</p>
                  <p className="text-xs text-gray-500">ASA: 2675148574</p>
                </div>
                <div>
                  <p className="text-gray-300">WEED:</p>
                  <p className="text-purple-400 font-bold">{weedBalance.toLocaleString()}</p>
                  <p className="text-xs text-gray-500">ASA: 2676316280</p>
                </div>
                <div>
                  <p className="text-gray-300">ALGO:</p>
                  <p className="text-blue-400 font-bold">{algoBalance.toFixed(2)}</p>
                </div>
                <div>
                  <p className="text-gray-300">USDC:</p>
                  <p className="text-yellow-400 font-bold">${usdcBalance.toFixed(2)}</p>
                </div>
              </div>
              <button
                className="w-full bg-gradient-to-r from-red-500 to-red-600 py-2 rounded-lg font-semibold hover:from-red-600 hover:to-red-700 transition-all"
                onClick={handleDisconnectWallet}
              >
                Disconnect Wallet
              </button>
            </div>
          </div>
        )}

        {/* Main Content Sections */}
        <div className="mt-10">
          {activeTab === "dashboard" && (
            <div className="space-y-8">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="glass-card rounded-2xl p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-white flex items-center">
                      <i data-feather="leaf" className="mr-2 text-green-400"></i>
                      Multi-Token Wallet
                    </h3>
                  </div>
                  <div className="bg-black bg-opacity-30 rounded-lg p-4 space-y-3">
                    <div>
                      <p className="text-sm text-gray-300">Algorand Address:</p>
                      <p className="font-mono text-xs text-green-400 break-all">{walletConnected ? walletAddress : 'Not connected'}</p>
                    </div>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <p className="text-gray-300">HEMP:</p>
                        <p className="text-green-400 font-bold">{hempBalance.toLocaleString()}</p>
                        <p className="text-xs text-gray-500">ASA: 2675148574</p>
                      </div>
                      <div>
                        <p className="text-gray-300">WEED:</p>
                        <p className="text-purple-400 font-bold">{weedBalance.toLocaleString()}</p>
                        <p className="text-xs text-gray-500">ASA: 2676316280</p>
                      </div>
                      <div>
                        <p className="text-gray-300">ALGO:</p>
                        <p className="text-blue-400 font-bold">{algoBalance.toFixed(2)}</p>
                      </div>
                      <div>
                        <p className="text-gray-300">USDC:</p>
                        <p className="text-yellow-400 font-bold">${usdcBalance.toFixed(2)}</p>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="glass-card rounded-2xl p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-white flex items-center">
                      <i data-feather="award" className="mr-2 text-orange-400"></i>
                      Staking Tier Status
                    </h3>
                  </div>
                  <div className="bg-gradient-to-r from-gray-600 to-gray-700 rounded-lg p-4 mb-3">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-black font-bold text-lg">None Tier</p>
                        <p className="text-black/80 text-sm">0% Off • 0% APY</p>
                      </div>
                      <i data-feather="award" className="text-black"></i>
                    </div>
                  </div>
                  <div className="text-sm space-y-1">
                    <div className="flex justify-between">
                      <span className="text-gray-300">Staked HEMP:</span>
                      <span className="text-green-400">0</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-300">Shipping:</span>
                      <span className="text-blue-400">Standard</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-300">Voting Power:</span>
                      <span className="text-purple-400">0</span>
                    </div>
                  </div>
                </div>
              </div>
              {/* Additional dashboard cards can be added here for full fidelity */}
            </div>
          )}
          {activeTab === "vapes" && (
            <div>
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold text-white mb-2">CBD Gold 510 Ceramic Vapes</h2>
                <p className="text-gray-300">Premium CBD 510 ceramic vapes with 66.6% CBD potency</p>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {cbdVapes.map((vape) => (
                  <div key={vape.id} className="glass-card rounded-2xl p-6 overflow-hidden relative">
                    <div className={`absolute top-0 right-0 w-20 h-20 bg-gradient-to-br ${vape.color} opacity-20 rounded-full -mr-10 -mt-10`}></div>
                    <div className="relative">
                      <div className="flex items-center justify-between mb-4">
                        <img src={vape.image} alt={vape.name} className="w-12 h-12 rounded-full object-cover" />
                        <div className={`px-3 py-1 rounded-full text-xs font-semibold ${
                          vape.type.includes('Indica') ? 'bg-purple-600 text-white' :
                          vape.type.includes('Sativa') ? 'bg-yellow-600 text-black' :
                          'bg-green-600 text-white'
                        }`}>
                          {vape.type}
                        </div>
                      </div>
                      <h3 className="font-bold text-white text-lg mb-1">{vape.name}</h3>
                      <p className="text-sm text-gray-300 mb-2">3rd Party Lab Tested</p>
                      <div className="bg-black bg-opacity-30 rounded-lg p-3 mb-4 space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-300">Flavor:</span>
                          <span className="text-yellow-400">{vape.flavor}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-300">Effects:</span>
                          <span className="text-green-400">{vape.effects}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-300">Potency:</span>
                          <span className="text-blue-400 font-bold">{vape.potency}</span>
                        </div>
                      </div>
                      <div className="mb-4">
                        <p className="text-xs text-gray-400 mb-1">Key Terpenes:</p>
                        <div className="flex flex-wrap gap-1">
                          {vape.terpenes.map((terpene) => (
                            <span key={terpene} className="px-2 py-1 bg-green-600/30 text-green-300 text-xs rounded-full">
                              {terpene}
                            </span>
                          ))}
                        </div>
                      </div>
                      <div className="bg-black bg-opacity-30 rounded-lg p-3 mb-4">
                        <div className="text-center mb-2">
                          <p className="text-lg font-bold text-blue-400">{vape.priceAlgo.toFixed(2)} ALGO</p>
                          <p className="text-lg font-bold text-yellow-400">${vape.priceUsdc.toFixed(2)} USDC</p>
                        </div>
                        <div className="text-xs text-center">
                          <p className="text-green-300">Earn: {vape.hempEarned.toLocaleString()} HEMP</p>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <button
                          className={`w-full py-2 px-4 rounded-lg font-semibold transition-all duration-300 bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 hover:to-blue-700 ${loadingAction === 'buy-algo-' + vape.id ? 'opacity-60 cursor-wait' : ''}`}
                          disabled={loadingAction === 'buy-algo-' + vape.id}
                          onClick={() => handleBuyWithAlgo(vape)}
                          aria-label="Buy with ALGO"
                        >
                          <i data-feather="dollar-sign" className="inline mr-2"></i>
                          {loadingAction === 'buy-algo-' + vape.id ? <span className="inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin align-middle mr-2"></span> : null}
                          {loadingAction === 'buy-algo-' + vape.id ? 'Processing…' : 'Buy with ALGO'}
                        </button>
                        <button
                          className={`w-full py-2 px-4 rounded-lg font-semibold transition-all duration-300 bg-gradient-to-r from-yellow-500 to-yellow-600 text-black hover:from-yellow-600 hover:to-yellow-700 ${loadingAction === 'buy-usdc-' + vape.id ? 'opacity-60 cursor-wait' : ''}`}
                          disabled={loadingAction === 'buy-usdc-' + vape.id}
                          onClick={() => handleBuyWithUsdc(vape)}
                          aria-label="Buy with USDC"
                        >
                          <i data-feather="shopping-cart" className="inline mr-2"></i>
                          {loadingAction === 'buy-usdc-' + vape.id ? <span className="inline-block w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin align-middle mr-2"></span> : null}
                          {loadingAction === 'buy-usdc-' + vape.id ? 'Processing…' : 'Buy with USDC'}
                        </button>
                        <button
                          className={`w-full py-2 px-4 rounded-lg font-semibold transition-all duration-300 bg-gradient-to-r from-purple-500 to-pink-600 text-white hover:from-purple-600 hover:to-pink-700 ${loadingAction === 'spin-' + vape.id ? 'opacity-60 cursor-wait' : ''}`}
                          disabled={loadingAction === 'spin-' + vape.id}
                          onClick={() => handleSpinForGold(vape)}
                          aria-label="Spin for Gold"
                        >
                          <i data-feather="refresh-cw" className="inline mr-2"></i>
                          {loadingAction === 'spin-' + vape.id ? <span className="inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin align-middle mr-2"></span> : null}
                          {loadingAction === 'spin-' + vape.id ? 'SPINNING…' : 'SPIN FOR GOLD'}
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              {notification && (
                <div className={`fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50 px-6 py-3 rounded-lg shadow-lg ${notification.type === 'success' ? 'bg-green-600' : 'bg-red-600'} text-white font-semibold`}>{notification.message}</div>
              )}
            </div>
          )}
          {activeTab === "staking" && (
            <div>
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold text-white mb-2">HEMP Token ShopFi</h2>
                <p className="text-gray-300">Stake HEMP tokens to unlock tiered discounts and exclusive benefits</p>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {stakingPools.map((pool) => (
                  <div key={pool.id} className="glass-card rounded-2xl p-6">
                    <div className="text-center">
                      <div className={`w-16 h-16 bg-gradient-to-br ${pool.color} rounded-full mx-auto mb-4 flex items-center justify-center`}>
                        <i data-feather="lock" className="text-white"></i>
                      </div>
                      <h3 className="font-bold text-white text-xl mb-2">{pool.name}</h3>
                      <div className={`inline-block px-4 py-2 rounded-full mb-4 bg-gradient-to-r ${pool.color}`}> 
                        <span className="text-black font-bold">{pool.discount}% OFF</span>
                      </div>
                      <div className="bg-black bg-opacity-30 rounded-lg p-3 mb-4">
                        <div className="text-sm space-y-2">
                          <div className="flex justify-between">
                            <span className="text-gray-300">Min Stake:</span>
                            <span className="text-green-400">{(pool.minStake / 1000000).toFixed(1)}M HEMP</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-300">APY:</span>
                            <span className="text-blue-400">{pool.apy}%</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-gray-300">Shipping:</span>
                            <span className="text-purple-400">{pool.shipping}</span>
                          </div>
                        </div>
                      </div>
                      <div className="bg-black bg-opacity-30 rounded-lg p-3 mb-4">
                        <p className="text-xs text-gray-300 font-semibold mb-2">Benefits:</p>
                        <div className="space-y-1">
                          {pool.benefits.map((benefit) => (
                            <p key={benefit} className="text-xs text-yellow-400">• {benefit}</p>
                          ))}
                        </div>
                      </div>
                      <div className="space-y-3">
                        <input
                          type="number"
                          placeholder={`Min ${(pool.minStake / 1000000).toFixed(1)}M HEMP`}
                          className="w-full bg-black bg-opacity-30 border border-white/20 rounded-lg px-3 py-2 text-white placeholder-gray-400 text-sm"
                          value={stakingInputs[pool.id] || ''}
                          onChange={e => setStakingInputs(inputs => ({ ...inputs, [pool.id]: e.target.value }))}
                          disabled={loadingAction === 'stake-' + pool.id}
                        />
                        <button
                          className={`w-full py-3 px-4 rounded-lg font-semibold transition-all duration-300 bg-gradient-to-r ${pool.color} text-black hover:opacity-90 ${loadingAction === 'stake-' + pool.id ? 'opacity-60 cursor-wait' : ''}`}
                          disabled={loadingAction === 'stake-' + pool.id}
                          onClick={() => handleStake(pool)}
                          aria-label="Stake HEMP Tokens"
                        >
                          {loadingAction === 'stake-' + pool.id ? <span className="inline-block w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin align-middle mr-2"></span> : null}
                          {loadingAction === 'stake-' + pool.id ? 'Staking…' : 'Stake HEMP Tokens'}
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              {notification && (
                <div className={`fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50 px-6 py-3 rounded-lg shadow-lg ${notification.type === 'success' ? 'bg-green-600' : 'bg-red-600'} text-white font-semibold transition-all duration-500 animate-fadeInUp`}
                  role="alert"
                  aria-live="polite"
                >
                  {notification.message}
                </div>
              )}
            </div>
          )}
          {activeTab === "governance" && (
            <div>
              <div className="text-center mb-8">
                <h2 className="text-3xl font-bold text-white mb-2">WEED Governance</h2>
                <p className="text-gray-300">Participate in platform governance with your WEED tokens</p>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {governanceProposals.map((proposal) => (
                  <div key={proposal.id} className="glass-card rounded-2xl p-6">
                    <div className="text-center">
                      <h3 className="font-bold text-white text-xl mb-2">{proposal.title}</h3>
                      <p className="text-gray-300 text-sm mb-4">{proposal.description}</p>
                      <div className="flex justify-center gap-4 mb-4">
                        <button
                          className={`py-2 px-6 rounded-lg font-semibold transition-all duration-300 bg-gradient-to-r from-green-400 via-blue-500 to-purple-600 text-black hover:opacity-90 ${loadingAction === 'vote-' + proposal.id ? 'opacity-60 cursor-wait' : ''}`}
                          disabled={loadingAction === 'vote-' + proposal.id}
                          onClick={() => handleVote(proposal)}
                          aria-label="Vote"
                        >
                          {loadingAction === 'vote-' + proposal.id ? <span className="inline-block w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin align-middle mr-2"></span> : null}
                          Vote
                        </button>
                      </div>
                      <div className="flex justify-between text-xs text-gray-400">
                        {/* Voting stats could go here if available */}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              {notification && (
                <div className={`fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50 px-6 py-3 rounded-lg shadow-lg ${notification.type === 'success' ? 'bg-green-600' : 'bg-red-600'} text-white font-semibold transition-all duration-500 animate-fadeInUp`}
                  role="alert"
                  aria-live="polite"
                >
                  {notification.message}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
      </div>
      <footer className="bg-gray-900 text-white py-8 mt-12">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div>
            <h3 className="text-lg font-bold mb-4">ShopFi</h3>
            <p className="text-gray-400 text-sm">Hemp Innovation powered by CBD Gold & Algorand</p>
          </div>
          <div>
            <h4 className="font-bold mb-4">Products</h4>
            <ul className="space-y-2 text-gray-400">
              <li><a href="#" className="hover:text-green-400 transition">CBD Gold Vapes</a></li>
              <li><a href="#" className="hover:text-green-400 transition">ShopFi Staking</a></li>
              <li><a href="#" className="hover:text-green-400 transition">Governance</a></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold mb-4">Resources</h4>
            <ul className="space-y-2 text-gray-400">
              <li><a href="#" className="hover:text-green-400 transition">Whitepaper</a></li>
              <li><a href="#" className="hover:text-green-400 transition">Tokenomics</a></li>
              <li><a href="#" className="hover:text-green-400 transition">FAQ</a></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold mb-4">Connect</h4>
            <div className="flex space-x-4">
              <a href="#" className="text-gray-400 hover:text-green-400 transition"><i data-feather="twitter"></i></a>
              <a href="#" className="text-gray-400 hover:text-green-400 transition"><i data-feather="instagram"></i></a>
              <a href="#" className="text-gray-400 hover:text-green-400 transition"><i data-feather="discord"></i></a>
              <a href="#" className="text-gray-400 hover:text-green-400 transition"><i data-feather="github"></i></a>
            </div>
            <div className="mt-4 text-sm text-gray-400">
              <p>support@cbdgold.com</p>
            </div>
          </div>
        </div>
        <div className="border-t border-gray-800 mt-8 pt-8 text-sm text-gray-500">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <p>© 2025 CBD Gold ShopFi. All rights reserved.</p>
            <div className="flex space-x-4 mt-4 md:mt-0">
              <a href="#" className="hover:text-green-400 transition">Terms</a>
              <a href="#" className="hover:text-green-400 transition">Privacy</a>
              <a href="#" className="hover:text-green-400 transition">Compliance</a>
            </div>
          </div>
        </div>
      </div>
      </footer>
    </>
  );
}
export default App;