/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"CBDGoldGovernance","structs":{},"methods":[{"name":"create_proposal","desc":"Admin creates a new governance proposal with supplied title.","args":[{"name":"title","type":"string","desc":"UTF-8 proposal title"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":[]}},{"name":"vote","desc":"Eligible voter casts a vote for (1) or against (0) a proposal.","args":[{"name":"proposal_id","type":"uint64","desc":"Target proposal id"},{"name":"vote_for","type":"uint64","desc":"1 for yes, 0 for no"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":[]}},{"name":"finalize_proposal","desc":"Finalize proposal outcome once voting window closes.","args":[{"name":"proposal_id","type":"uint64","desc":"Target proposal id"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":[]}},{"name":"get_proposal","desc":"Emit proposal aggregates (votes, status) via logs for off-chain reads.","args":[{"name":"proposal_id","type":"uint64","desc":"Target proposal id"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":[]}},{"name":"update_voting_power","desc":"Update caller voting power based on current WEED holdings.","args":[{"name":"voting_power","type":"uint64","desc":"Voting power weight"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":[]}},{"name":"set_quorum","desc":"Admin sets the minimum vote weight required for quorum.","args":[{"name":"quorum_min","type":"uint64","desc":"Minimum aggregate voting weight"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":[]}}],"state":{"schema":{"global":{"ints":5,"bytes":1},"local":{"ints":2,"bytes":0}},"keys":{"global":{"total_proposals":{"key":"dG90YWxfcHJvcG9zYWxz","keyType":"AVMString","valueType":"AVMUint64","desc":"Total proposals ever created"},"active_proposals":{"key":"YWN0aXZlX3Byb3Bvc2Fscw==","keyType":"AVMString","valueType":"AVMUint64","desc":"Current active proposals"},"admin_address":{"key":"YWRtaW5fYWRkcmVzcw==","keyType":"AVMString","valueType":"AVMBytes","desc":"Administrator address"},"voting_enabled":{"key":"dm90aW5nX2VuYWJsZWQ=","keyType":"AVMString","valueType":"AVMUint64","desc":"Voting toggle"},"min_weed_required":{"key":"bWluX3dlZWRfcmVxdWlyZWQ=","keyType":"AVMString","valueType":"AVMUint64","desc":"Minimum WEED requirement to vote"},"quorum_min":{"key":"cXVvcnVtX21pbg==","keyType":"AVMString","valueType":"AVMUint64","desc":"Minimum votes to reach quorum"}},"local":{"voting_power":{"key":"dm90aW5nX3Bvd2Vy","keyType":"AVMString","valueType":"AVMUint64","desc":"Individual voting power"},"total_votes":{"key":"dG90YWxfdm90ZXM=","keyType":"AVMString","valueType":"AVMUint64","desc":"Total votes cast by user"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":""},"bareActions":{"create":[],"call":["DeleteApplication","NoOp","OptIn","UpdateApplication"]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never

type BareCallOnComplete =
  | OnApplicationComplete.NoOpOC
  | OnApplicationComplete.OptInOC
  | OnApplicationComplete.CloseOutOC
  | OnApplicationComplete.ClearStateOC
  | OnApplicationComplete.DeleteApplicationOC

type BareCallParams = Expand<Omit<AppClientBareCallParams, 'onComplete'> & { onComplete?: BareCallOnComplete }>
type BareCallParamsWithCompilation = Expand<Omit<AppClientBareCallParams & AppClientCompilationParams, 'onComplete'> & { onComplete?: BareCallOnComplete }>
type BareCallParamsWithSend = Expand<Omit<AppClientBareCallParams & SendParams, 'onComplete'> & { onComplete?: BareCallOnComplete }>
type BareCallParamsWithSendAndCompilation = Expand<Omit<AppClientBareCallParams & AppClientCompilationParams & SendParams, 'onComplete'> & { onComplete?: BareCallOnComplete }>


/**
 * The argument types for the CbdGoldGovernance contract
 */
export type CbdGoldGovernanceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_proposal(string)void': {
      /**
       * UTF-8 proposal title
       */
      title: string
    }
    'vote(uint64,uint64)void': {
      /**
       * Target proposal id
       */
      proposalId: bigint | number
      /**
       * 1 for yes, 0 for no
       */
      voteFor: bigint | number
    }
    'finalize_proposal(uint64)void': {
      /**
       * Target proposal id
       */
      proposalId: bigint | number
    }
    'get_proposal(uint64)void': {
      /**
       * Target proposal id
       */
      proposalId: bigint | number
    }
    'update_voting_power(uint64)void': {
      /**
       * Voting power weight
       */
      votingPower: bigint | number
    }
    'set_quorum(uint64)void': {
      /**
       * Minimum aggregate voting weight
       */
      quorumMin: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_proposal(string)void': [title: string]
    'vote(uint64,uint64)void': [proposalId: bigint | number, voteFor: bigint | number]
    'finalize_proposal(uint64)void': [proposalId: bigint | number]
    'get_proposal(uint64)void': [proposalId: bigint | number]
    'update_voting_power(uint64)void': [votingPower: bigint | number]
    'set_quorum(uint64)void': [quorumMin: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type CbdGoldGovernanceReturns = {
  'create_proposal(string)void': void
  'vote(uint64,uint64)void': void
  'finalize_proposal(uint64)void': void
  'get_proposal(uint64)void': void
  'update_voting_power(uint64)void': void
  'set_quorum(uint64)void': void
}

/**
 * Defines the types of available calls and state of the CbdGoldGovernance smart contract.
 */
export type CbdGoldGovernanceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_proposal(string)void' | 'create_proposal', {
      argsObj: CbdGoldGovernanceArgs['obj']['create_proposal(string)void']
      argsTuple: CbdGoldGovernanceArgs['tuple']['create_proposal(string)void']
      returns: CbdGoldGovernanceReturns['create_proposal(string)void']
    }>
    & Record<'vote(uint64,uint64)void' | 'vote', {
      argsObj: CbdGoldGovernanceArgs['obj']['vote(uint64,uint64)void']
      argsTuple: CbdGoldGovernanceArgs['tuple']['vote(uint64,uint64)void']
      returns: CbdGoldGovernanceReturns['vote(uint64,uint64)void']
    }>
    & Record<'finalize_proposal(uint64)void' | 'finalize_proposal', {
      argsObj: CbdGoldGovernanceArgs['obj']['finalize_proposal(uint64)void']
      argsTuple: CbdGoldGovernanceArgs['tuple']['finalize_proposal(uint64)void']
      returns: CbdGoldGovernanceReturns['finalize_proposal(uint64)void']
    }>
    & Record<'get_proposal(uint64)void' | 'get_proposal', {
      argsObj: CbdGoldGovernanceArgs['obj']['get_proposal(uint64)void']
      argsTuple: CbdGoldGovernanceArgs['tuple']['get_proposal(uint64)void']
      returns: CbdGoldGovernanceReturns['get_proposal(uint64)void']
    }>
    & Record<'update_voting_power(uint64)void' | 'update_voting_power', {
      argsObj: CbdGoldGovernanceArgs['obj']['update_voting_power(uint64)void']
      argsTuple: CbdGoldGovernanceArgs['tuple']['update_voting_power(uint64)void']
      returns: CbdGoldGovernanceReturns['update_voting_power(uint64)void']
    }>
    & Record<'set_quorum(uint64)void' | 'set_quorum', {
      argsObj: CbdGoldGovernanceArgs['obj']['set_quorum(uint64)void']
      argsTuple: CbdGoldGovernanceArgs['tuple']['set_quorum(uint64)void']
      returns: CbdGoldGovernanceReturns['set_quorum(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Total proposals ever created
         */
        totalProposals: bigint
        /**
         * Current active proposals
         */
        activeProposals: bigint
        /**
         * Administrator address
         */
        adminAddress: BinaryState
        /**
         * Voting toggle
         */
        votingEnabled: bigint
        /**
         * Minimum WEED requirement to vote
         */
        minWeedRequired: bigint
        /**
         * Minimum votes to reach quorum
         */
        quorumMin: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        /**
         * Individual voting power
         */
        votingPower: bigint
        /**
         * Total votes cast by user
         */
        totalVotes: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CbdGoldGovernanceSignatures = keyof CbdGoldGovernanceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CbdGoldGovernanceNonVoidMethodSignatures = keyof CbdGoldGovernanceTypes['methods'] extends infer T ? T extends keyof CbdGoldGovernanceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CbdGoldGovernance smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CbdGoldGovernanceSignatures> = CbdGoldGovernanceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CbdGoldGovernance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CbdGoldGovernanceSignatures> = CbdGoldGovernanceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CbdGoldGovernanceTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = CbdGoldGovernanceTypes['state']['local']['keys']


/**
 * Defines supported update method params for this smart contract
 */
export type CbdGoldGovernanceUpdateCallParams =
  | BareCallParams & {method?: never}
/**
 * Defines supported delete method params for this smart contract
 */
export type CbdGoldGovernanceDeleteCallParams =
  | BareCallParams & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type CbdGoldGovernanceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: CbdGoldGovernanceUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: CbdGoldGovernanceDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CbdGoldGovernance smart contract
 */
export abstract class CbdGoldGovernanceParamsFactory {
}

/**
 * A factory to create and deploy one or more instance of the CBDGoldGovernance smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CbdGoldGovernanceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CbdGoldGovernanceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CbdGoldGovernanceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CbdGoldGovernanceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CBDGoldGovernance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CbdGoldGovernanceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new CbdGoldGovernanceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: BareCallParamsWithCompilation) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: BareCallParams) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
  }

  /**
   * Send calls to the current app
   */
  readonly send = {
  }

}
/**
 * A client to make calls to the CBDGoldGovernance smart contract
 */
export class CbdGoldGovernanceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CbdGoldGovernanceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CbdGoldGovernance app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CbdGoldGovernanceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CbdGoldGovernanceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CbdGoldGovernanceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CbdGoldGovernanceClient> {
    return new CbdGoldGovernanceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CbdGoldGovernanceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CbdGoldGovernanceClient> {
    return new CbdGoldGovernanceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: BareCallParamsWithCompilation) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: BareCallParams) => {
        return this.appClient.params.bare.delete(params)
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: BareCallParams) => {
        return this.appClient.params.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the CBDGoldGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: BareCallParams) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CBDGoldGovernance smart contract using a bare call.
     *
     * @param params The params for the bare (raw) call
     * @returns The call result
     */
    bare: (params?: BareCallParams) => {
      return this.appClient.params.bare.call(params)
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: BareCallParamsWithCompilation) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: BareCallParams) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: BareCallParams) => {
        return this.appClient.createTransaction.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the CBDGoldGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: BareCallParams) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CBDGoldGovernance smart contract using a bare call.
     *
     * @param params The params for the bare (raw) call
     * @returns The call result
     */
    bare: (params?: BareCallParams) => {
      return this.appClient.createTransaction.bare.call(params)
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: BareCallParamsWithSendAndCompilation) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: BareCallParamsWithSend) => {
        return this.appClient.send.bare.delete(params)
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CBDGoldGovernance smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: BareCallParamsWithSend) => {
        return this.appClient.send.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the CBDGoldGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: BareCallParamsWithSend) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CBDGoldGovernance smart contract using a bare call.
     *
     * @param params The params for the bare (raw) call
     * @returns The call result
     */
    bare: (params?: BareCallParamsWithSend) => {
      return this.appClient.send.bare.call(params)
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CbdGoldGovernanceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CBDGoldGovernance app
   */
  state = {
    /**
     * Methods to access global state for the current CBDGoldGovernance app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalProposals: result.total_proposals,
          activeProposals: result.active_proposals,
          adminAddress: new BinaryStateValue(result.admin_address),
          votingEnabled: result.voting_enabled,
          minWeedRequired: result.min_weed_required,
          quorumMin: result.quorum_min,
        }
      },
      /**
       * Get the current value of the total_proposals key in global state
       */
      totalProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_proposals")) as bigint | undefined },
      /**
       * Get the current value of the active_proposals key in global state
       */
      activeProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("active_proposals")) as bigint | undefined },
      /**
       * Get the current value of the admin_address key in global state
       */
      adminAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin_address")) as Uint8Array | undefined) },
      /**
       * Get the current value of the voting_enabled key in global state
       */
      votingEnabled: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voting_enabled")) as bigint | undefined },
      /**
       * Get the current value of the min_weed_required key in global state
       */
      minWeedRequired: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("min_weed_required")) as bigint | undefined },
      /**
       * Get the current value of the quorum_min key in global state
       */
      quorumMin: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quorum_min")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current CBDGoldGovernance app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            votingPower: result.voting_power,
            totalVotes: result.total_votes,
          }
        },
        /**
         * Get the current value of the voting_power key in local state
         */
        votingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("voting_power")) as bigint | undefined },
        /**
         * Get the current value of the total_votes key in local state
         */
        totalVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("total_votes")) as bigint | undefined },
      }
    },
  }

  public newGroup(): CbdGoldGovernanceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bare method call to the CBDGoldGovernance contract
       */
      bare(params: BareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.bare(params)))
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
        }
      },
      get optIn() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppCall(client.params.optIn.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CBDGoldGovernance contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CbdGoldGovernanceComposer
  }
}
export type CbdGoldGovernanceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the CBDGoldGovernance smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): CbdGoldGovernanceComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the CBDGoldGovernance smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): CbdGoldGovernanceComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the CBDGoldGovernance smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): CbdGoldGovernanceComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CBDGoldGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CbdGoldGovernanceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CbdGoldGovernanceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CbdGoldGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CbdGoldGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CbdGoldGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CbdGoldGovernanceComposerResults<TReturns>>
}
export type CbdGoldGovernanceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

